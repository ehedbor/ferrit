#Note: newlines are assumed to be ignored unless specifically called for.

program
    : moduleDeclaration topLevelDeclaration* EOF
    ;

moduleDeclaration
    : "module" modulePath terminators
    ;

usingDeclaration
    : "using" identifier modulePath ("."  ("*" | modulePaths) )? terminators
    ;

modulePath
    : identifier ("." identifier)*
    ;

modulePaths
    : "[" modulePath ("," modulePath)* ","? "]"
    ;

topLevelDeclaration
    : declaration
    | statements
    ;

declaration 
    : usingDeclaration
    | classDeclaration
    | functionDeclaration
    | propertyDeclaration
    ;

classDeclaration
    : modifiers? ("class" | "object" | "trait")
      identifier genericParameters?
      superclasses?
      classBody?
    ;

superclasses
    : ":" type ("," type)* ","?
    ;

classBody
    : "{" classMember* "}"
    ;

classMember
    : usingDeclaration
    | classDeclaration
    | functionDeclaration
    | propertyDeclaration
    | constructorDeclaration
    ;

constructorDeclaration
    : modifiers? "init" constructorParameters functionBody?
    ;

constructorParameters
    : "(" constructorParameter ("," constructorParameter)* ","?)? ")"
    | "[" constructorParameter ("," constructorParameter)* ","?)? "]"
    ;

constructorParameter
    : ((modifiers? "var" | "val") functionParameter
    ;

functionDeclaration 
    : modifiers? "fun" identifier
        functionParameters returnValue?
        functionBody? terminators
    ;

modifiers 
    : modifier+ 
    ;

modifier  
    : "public" | "protected" | "module" | "private"
    | "companion" | "friend"
    | "open" | "closed" | "abstract" | "override"
    | "operator" | "native"
    ;

functionParameters
    : "(" (parameter ("," parameter)* ","?)? ")"
    ;

functionParameter
    : identifier ":" type "..."? ("=" expression)?
    ;

returnValue
    : "->" type
    ;

functionBody 
    : block
    | "=" (block | expression)
    ;

propertyDeclaration
    : modifiers? ("var" | "val") identifier (":" type)? propertyInitializer?
    ;

propertyInitializer
    : "=" expression
    ;

type
    : "(" type ")"
    | type "?"
    | (type ".")? "(" type ( "," type ","? )* ")" "->" type
    | identifier genericParameters? ("." identifier genericParameters?)*
    ;

genericParameters
    : "<" genericParameter ("," genericParameter)* ","? ">"
    ;

genericParameter
    : identifier (":" type ("+" type)*)?
    ;

statements 
    : (statement (terminators statement)*)? terminators?
    ;
    
statement 
    : expression
    | loop
    | assignment
    ; 

loop
    : forLoop
    | whileLoop
    | doWhileLoop
    ;

forLoop
    : "for" "(" identifier (":" type)? "in" expression ")" loopBody
    ;

whileLoop
    : "while" "(" expression ")" loopBody
    ;

doWhileLoop
    : "do" loopBody "while" "(" expression ")"

loopBody
    : block
    | expression
    ;

block 
    : "{" declaration* "}"
    ;

assignment
    : assignableExpression assignmentOperator expression
    ;

assignableExpression
    : "(" assignableExpression ")"
    | callExpression
    | identifier
    ;

assignmentOperator
    : "="
    | "+=" | "-=" | "*=" | "/=" | "%="
    | "&=" | "|=" | "<<=" | ">>="
    | "&&=" | "||="
    ;

terminators
    : terminator+
    ;    
    
terminator
    : ";"
    | NEWLINE
    | EOF
    ;
    
expression 
    : disjunction
    ;

# if assignment was an expression, it would go here

disjunction
    : conjunction ("||" conjunction)*
    ;

conjunction
    : equality ("&&" equality)*
    ;

equality
    : comparison (("==" | "!=") comparison)*
    ;

comparison
    : bitwiseOr ((">" | "<" | ">=" | "<=") bitwiseOr)*
    ;

containsOp
    : bitwiseOr (("in" | "!in") bitwiseOr)*
    ;

bitwiseOr
    : bitwiseXor ("|" bitwiseXor)*
    ;

bitwiseXor
    : bitwiseAnd ("^" bitwiseXor)*
    ;

bitwiseAnd
    : bitwiseShift ("&" bitwiseShift)*
    ;

bitwiseShift
    : additive (("<<" | ">>") additive)*
    ;

additive
    : multiplicative (("+" | "-") multiplicative)*
    ;

multiplicative
    : unary (("*" | "/" | "%") unary)*
    ;

typeOp
    : unaryPrefix (("is" | "!is" | "as" | "as?") type)?
    ;

unaryPrefix
    : ("+" | "-" | "!" | "~" | "++" | "--")* unaryPrefix
    | unaryPostfix
    ;

unaryPostfix
    : primary unaryPostfixSuffix*
    ;

unaryPostfixSuffix
    : "++" | "--" | "??" | "!!"
    | genericArguments
    | callSuffix
    | indexingSuffix
    | accessSuffix
    ;

callSuffix
    | genericArguments? ((arguments? | lambdaExpression) | lambdaExpression)
    ;

genericArguments
    : "<" (genericArgument ("," genericArgument)* ","?)? ">"
    ;

genericArgument
    : type
    ;

arguments
    : "(" (argument ("," argument)* ","?)? ")"
    ;

argument
    : expression
    ;

indexingSuffix
    : "[" expression ("," expression)* ","? "]"
    ;

accessSuffix
    : ("." | "?." | "::") (identifier | "class")
    ;

primary
    : parenthesizedExpression
    | controlFlowExpression
    | lambdaExpression
    | literal
    | identifier
    ;

parenthesizedExpression
    : "(" expression ")"
    ;

controlFlowExpression
    : ifExpression
    ;

ifExpression
    : "if" "(" expression ")" block | expression
      ("else" block | expression)?
    ;

lambdaExpression
    : "{" (lambdaParameters? "->")? statements "}"
    ;

lambdaParameters
    : lambdaParameter ("," lambdaParameter)* ","?
    ;

lambdaParameter
      identifier (":" type)?
    ;

literal
    : integerLiteral
    | floatLiteral
    | charLiteral
    | stringLiteral
    | "true" | "false"
    | "this" | "super"
    | "null"
    ;

integerLiteral 
    : (digit (digit | "_")*
      | "0x" hexDigit (hexDigit | "_")*
      | "0b" binDigit (binDigit | "_")*)
      integerSuffix?
    ;

integerSuffix
    : "sb" | "ub" | "b"
    | "s" | "us"
    | "i" | "ui"
    | "L" | "uL"
    ;

floatLiteral
    : digit (digit | "_")* "." (digit | "_")
      ([Ee])
    ;

charLiteral
    : "'" NON_NEWLINE_CHARACTER "'"
    ;

stringLiteral
    : "\"" NON_NEWLINE_CHARACTER* "\""
    ;

digit 
    : [0-9]
    ;

hexDigit
    : [0-9A-F]
    ;

binDigit
    : [01]
    ;

identifier
    : [a-zA-Z_][a-zA-Z0-9_]*
    ;
